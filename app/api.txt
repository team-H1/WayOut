 'Bearer 0zjmsSJLjr0dvpgoN7l0ivkBCDQ5DgtL'
bWGvtuZVVZwuMCkcsFtDsa2Amfpy2w-uVzCJ0Hbit2U

import { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  ScrollView,
  KeyboardAvoidingView,
  Platform,
  Keyboard,
  Animated,
  Easing,
  Alert,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { LinearGradient } from 'expo-linear-gradient';
import { Send } from 'lucide-react-native';

const COHERE_API_KEY = 'gcGcmZtiannbHLfwynazalZChI8XZCBurgJzBKVe';

const TypingDots = () => {
  const dot1 = useRef(new Animated.Value(0)).current;
  const dot2 = useRef(new Animated.Value(0)).current;
  const dot3 = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    const animate = (dot, delay) =>
      Animated.loop(
        Animated.sequence([
          Animated.delay(delay),
          Animated.timing(dot, { toValue: 1, duration: 400, useNativeDriver: true }),
          Animated.timing(dot, { toValue: 0, duration: 400, useNativeDriver: true }),
        ])
      ).start();

    animate(dot1, 0);
    animate(dot2, 200);
    animate(dot3, 400);
  }, []);

  const dotStyle = (animatedValue) => ({
    opacity: animatedValue,
    transform: [
      {
        scale: animatedValue.interpolate({ inputRange: [0, 1], outputRange: [1, 1.4] }),
      },
    ],
  });

  return (
    <View style={typingStyles.dotsWrapper}>
      <Animated.View style={[typingStyles.dot, dotStyle(dot1)]} />
      <Animated.View style={[typingStyles.dot, dotStyle(dot2)]} />
      <Animated.View style={[typingStyles.dot, dotStyle(dot3)]} />
    </View>
  );
};

export default function ChatScreen() {
  const [messages, setMessages] = useState([
    {
      id: '1',
      text: "Hi! I'm Wanderly, your AI travel companion 🌍. Ask me anything!",
      sender: 'ai',
      timestamp: new Date(),
    },
  ]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const scrollViewRef = useRef(null);
  const fadeAnim = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    const sub = Keyboard.addListener('keyboardDidShow', () =>
      scrollViewRef.current?.scrollToEnd({ animated: true })
    );
    return () => sub.remove();
  }, []);

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 350,
      easing: Easing.out(Easing.ease),
      useNativeDriver: true,
    }).start();
  }, [messages.length]);

  const sendMessage = async () => {
    if (!inputText.trim()) return;

    const userMessage = {
      id: Date.now().toString(),
      text: inputText.trim(),
      sender: 'user',
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputText('');
    setIsTyping(true);
    scrollViewRef.current?.scrollToEnd({ animated: true });

    try {
      const response = await fetch('https://api.cohere.ai/v1/chat', {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${COHERE_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'command-r-plus',
          message: userMessage.text,
          chat_history: messages.map((msg) => ({
            role: msg.sender === 'user' ? 'USER' : 'CHATBOT',
            message: msg.text,
          })),
          preamble:
            "You are Wanderly, a helpful AI travel assistant. Only answer questions related to travel, such as hotels, destinations, flights, and trip planning. Keep responses short and helpful. If asked about anything else, respond with: “I'm here to help only with travel-related questions 😊.”",
          temperature: 0.3,
        }),
      });

      const data = await response.json();
      const reply = data.text || 'Hmm, I couldn’t come up with a response. Try again?';

      const aiMessage = {
        id: Date.now().toString() + '_ai',
        text: reply,
        sender: 'ai',
        timestamp: new Date(),
      };

      setMessages((prev) => [...prev, aiMessage]);
    } catch (error) {
      Alert.alert('Network Error', 'Failed to connect to Wanderly.');
    } finally {
      setIsTyping(false);
      scrollViewRef.current?.scrollToEnd({ animated: true });
    }
  };

  return (
    <LinearGradient colors={['#cce6ff', '#eaf4ff', '#ffffff']} style={{ flex: 1 }}>
      <SafeAreaView style={{ flex: 1 }}>
        <View style={styles.header}>
          <Text style={styles.headerTitle}>Wanderly</Text>
          <Text style={styles.headerSubtitle}>Your AI Travel Assistant</Text>
        </View>

        <KeyboardAvoidingView
          style={styles.flex}
          behavior={Platform.OS === 'ios' ? 'padding' : undefined}
        >
          <ScrollView
            ref={scrollViewRef}
            contentContainerStyle={styles.messagesContent}
            style={styles.messagesContainer}
            onContentSizeChange={() =>
              scrollViewRef.current?.scrollToEnd({ animated: true })
            }
          >
            {messages.map((msg) => (
              <Animated.View
                key={msg.id}
                style={[{
                  opacity: fadeAnim,
                  transform: [
                    {
                      scale: fadeAnim.interpolate({ inputRange: [0, 1], outputRange: [0.95, 1] }),
                    },
                  ],
                }, styles.messageGroup, msg.sender === 'user' ? styles.userGroup : styles.aiGroup]}
              >
                <Text style={styles.senderLabel}>{msg.sender === 'user' ? 'You' : 'Wanderly'}</Text>
                <View style={[styles.messageBubble, msg.sender === 'user' ? styles.userBubble : styles.aiBubble]}>
                  <Text style={[styles.messageText, msg.sender === 'user' ? styles.userText : styles.aiText]}>
                    {msg.text}
                  </Text>
                  <Text style={styles.timestamp}>
                    {msg.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                  </Text>
                </View>
              </Animated.View>
            ))}

            {isTyping && (
              <View style={[styles.messageBubble, styles.aiBubble]}>
                <TypingDots />
              </View>
            )}
          </ScrollView>

          <View style={styles.inputContainer}>
            <TextInput
              style={styles.input}
              placeholder="Ask me anything about travel..."
              value={inputText}
              onChangeText={setInputText}
              multiline
              maxLength={500}
            />
            <TouchableOpacity style={styles.sendButton} onPress={sendMessage}>
              <Send size={24} color="#fff" />
            </TouchableOpacity>
          </View>
        </KeyboardAvoidingView>
      </SafeAreaView>
    </LinearGradient>
  );
}

const styles = StyleSheet.create({
  flex: { flex: 1 },
  header: {
    paddingHorizontal: 24,
    paddingTop: 20,
    paddingBottom: 12,
  },
  headerTitle: {
    fontSize: 30,
    fontFamily: 'Inter-Black',
    color: '#0051A8',
    letterSpacing: -0.6,
  },
  headerSubtitle: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: '#333',
    marginTop: 4,
  },
  messagesContainer: { flex: 1 },
  messagesContent: { padding: 16, paddingBottom: 100 },
  messageGroup: { marginBottom: 16 },
  userGroup: { alignItems: 'flex-end' },
  aiGroup: { alignItems: 'flex-start' },
  senderLabel: {
    fontSize: 12,
    color: '#8E8E93',
    marginBottom: 4,
    marginLeft: 4,
  },
  messageBubble: {
    maxWidth: '80%',
    padding: 16,
    borderRadius: 20,
  },
  userBubble: {
    backgroundColor: '#007AFF',
    borderTopRightRadius: 4,
  },
  aiBubble: {
    backgroundColor: 'rgba(255,255,255,0.8)',
    borderTopLeftRadius: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.08,
    shadowRadius: 2,
    elevation: 1,
  },
  messageText: { fontSize: 16, lineHeight: 24 },
  userText: { color: '#fff', fontFamily: 'Inter-Regular' },
  aiText: { color: '#000', fontFamily: 'Inter-Regular' },
  timestamp: {
    fontSize: 12,
    color: 'rgba(0, 0, 0, 0.4)',
    marginTop: 6,
    alignSelf: 'flex-end',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    backgroundColor: '#fff',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderTopWidth: 1,
    borderTopColor: '#eaeaea',
  },
  input: {
    flex: 1,
    fontSize: 16,
    backgroundColor: '#f5f5f5',
    borderRadius: 24,
    paddingHorizontal: 20,
    paddingVertical: 12,
    maxHeight: 120,
    fontFamily: 'Inter-Regular',
  },
  sendButton: {
    marginLeft: 8,
    backgroundColor: '#007AFF',
    borderRadius: 24,
    width: 48,
    height: 48,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

const typingStyles = StyleSheet.create({
  dotsWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 6,
    paddingLeft: 4,
    gap: 6,
  },
  dot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#8E8E93',
  },
});







import { useState, useMemo, useEffect } from 'react';
import {
  View, Text, StyleSheet, ScrollView, Image, TextInput,
  TouchableOpacity, Platform, Modal, Dimensions, Pressable, BackHandler,
} from 'react-native';
import { Search, Filter, MapPin } from 'lucide-react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { SafeAreaView } from 'react-native-safe-area-context';
import { BlurView } from 'expo-blur';
import packages from '../data/Trip_Packages_With_Final_Category.json';

const categories = ['All', 'Beach', 'Mountain', 'Cultural', 'Urban', 'Adventure'];
const ITEMS_PER_PAGE = 5;

export default function ExploreScreen() {
  const [activeCategory, setActiveCategory] = useState('All');
  const [searchQuery, setSearchQuery] = useState('');
  const [page, setPage] = useState(0);
  const [selectedTrip, setSelectedTrip] = useState<any>(null);

  const filteredPackages = useMemo(() => {
    return packages.filter((pkg) => {
      const matchesCategory =
        activeCategory === 'All' || pkg.Category?.toLowerCase() === activeCategory.toLowerCase();
      const matchesSearch =
        pkg['City/Location'].toLowerCase().includes(searchQuery.toLowerCase()) ||
        pkg['Destination Country'].toLowerCase().includes(searchQuery.toLowerCase());
      return matchesCategory && matchesSearch;
    });
  }, [activeCategory, searchQuery]);

  const totalPages = Math.ceil(filteredPackages.length / ITEMS_PER_PAGE);
  const currentPackages = filteredPackages.slice(
    page * ITEMS_PER_PAGE,
    (page + 1) * ITEMS_PER_PAGE
  );

  const closeModal = () => setSelectedTrip(null);

  useEffect(() => {
    const backAction = () => {
      if (selectedTrip) {
        setSelectedTrip(null);
        return true;
      }
      return false;
    };
    const backHandler = BackHandler.addEventListener('hardwareBackPress', backAction);
    return () => backHandler.remove();
  }, [selectedTrip]);

  return (
    <LinearGradient colors={['#cce6ff', '#eaf4ff', '#ffffff']} style={styles.container}>
      <SafeAreaView style={{ flex: 1 }}>
        <ScrollView showsVerticalScrollIndicator={false} contentContainerStyle={{ paddingBottom: 40 }}>
        <View style={styles.header}>
  <Text style={styles.headerTitle}>Explore</Text>
  <Text style={styles.headerSubtitle}>Discover your next adventure</Text>
</View>


          <View style={styles.searchContainer}>
            <View style={styles.searchBar}>
              <Search size={20} color="#666" />
              <TextInput
                style={styles.searchInput}
                placeholder="Search destinations..."
                value={searchQuery}
                onChangeText={(text) => {
                  setSearchQuery(text);
                  setPage(0);
                }}
              />
            </View>
            <TouchableOpacity style={styles.filterButton}>
              <Filter size={20} color="#007AFF" />
            </TouchableOpacity>
          </View>

          <ScrollView
            horizontal
            showsHorizontalScrollIndicator={false}
            style={styles.categoriesContainer}
            contentContainerStyle={styles.categoriesContent}>
            {categories.map((category) => (
              <TouchableOpacity
                key={category}
                style={[styles.categoryButton, activeCategory === category && styles.categoryButtonActive]}
                onPress={() => {
                  setActiveCategory(category);
                  setPage(0);
                }}>
                <Text style={[styles.categoryText, activeCategory === category && styles.categoryTextActive]}>
                  {category}
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>

          <View style={styles.destinationsGrid}>
            {currentPackages.map((destination, index) => (
              <BlurView key={index} intensity={80} tint="light" style={styles.destinationCard}>
                <TouchableOpacity onPress={() => setSelectedTrip(destination)}>
                  <Image source={{ uri: destination['Image URL'] }} style={styles.destinationImage} />
                  <View style={styles.destinationInfo}>
                    <View style={styles.destinationHeader}>
                      <Text style={styles.destinationName}>{destination['City/Location']}</Text>
                      <Text style={styles.destinationRating}>★ {destination.Rating}</Text>
                    </View>
                    <View style={styles.destinationLocation}>
                      <MapPin size={14} color="#666" />
                      <Text style={styles.destinationCountry}>{destination['Destination Country']}</Text>
                    </View>
                    <Text style={styles.destinationPrice}>{destination['Price (INR)']}</Text>
                  </View>
                </TouchableOpacity>
              </BlurView>
            ))}
          </View>

          {totalPages > 1 && (
            <View style={[styles.pagination, { marginBottom: 40 }]}>
              <TouchableOpacity
                style={[styles.pageButton, page === 0 && styles.disabledButton]}
                disabled={page === 0}
                onPress={() => setPage(page - 1)}>
                <Text style={styles.pageButtonText}>Previous</Text>
              </TouchableOpacity>

              <Text style={styles.pageIndicator}>Page {page + 1} of {totalPages}</Text>

              <TouchableOpacity
                style={[styles.pageButton, page === totalPages - 1 && styles.disabledButton]}
                disabled={page === totalPages - 1}
                onPress={() => setPage(page + 1)}>
                <Text style={styles.pageButtonText}>Next</Text>
              </TouchableOpacity>
            </View>
          )}
        </ScrollView>
      </SafeAreaView>

      <Modal visible={!!selectedTrip} animationType="fade" transparent>
        <Pressable style={styles.backdrop} onPress={closeModal}>
          <Pressable style={styles.modalCard} onPress={() => {}}>
            <View>
              <Image source={{ uri: selectedTrip?.['Image URL'] }} style={styles.modalImage} />
              <TouchableOpacity style={styles.modalCloseButton} onPress={closeModal}>
                <Text style={styles.modalCloseText}>×</Text>
              </TouchableOpacity>
            </View>
            <ScrollView style={styles.modalContent} showsVerticalScrollIndicator={false}>
              <Text style={styles.modalTitle}>{selectedTrip?.['City/Location']} – {selectedTrip?.['Package Name']}</Text>

              <Text style={styles.modalText}><Text style={styles.label}>Country:</Text> {selectedTrip?.['Destination Country']}</Text>
              <Text style={styles.modalText}><Text style={styles.label}>Description:</Text> {selectedTrip?.Description}</Text>
              <Text style={styles.modalText}><Text style={styles.label}>Duration:</Text> {selectedTrip?.['Duration (Days/Nights)']}</Text>
              <Text style={styles.modalText}><Text style={styles.label}>Hotel:</Text> {selectedTrip?.Hotel}</Text>
              <Text style={styles.modalText}><Text style={styles.label}>Attractions:</Text> {selectedTrip?.['Included Attractions']}</Text>
              <Text style={styles.modalText}><Text style={styles.label}>Inclusions:</Text> {selectedTrip?.['Other Inclusions']}</Text>
              <Text style={styles.modalText}><Text style={styles.label}>Price:</Text> {selectedTrip?.['Price (INR)']}</Text>
              <Text style={styles.modalText}><Text style={styles.label}>Review:</Text> “{selectedTrip?.Review}”</Text>
              <Text style={styles.modalText}><Text style={styles.label}>Rating:</Text> ★ {selectedTrip?.Rating}</Text>
            </ScrollView>
          </Pressable>
        </Pressable>
      </Modal>
    </LinearGradient>
  );
}
const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: '#fff' },
  header: { padding: 24, paddingTop: Platform.OS === 'ios' ? 60 : 40 },
  title: { fontSize: 32, fontFamily: 'Inter_700Bold', color: '#000' },
  subtitle: { fontSize: 16, fontFamily: 'Inter_400Regular', color: '#666', marginTop: 8 },
  searchContainer: { flexDirection: 'row', paddingHorizontal: 24, gap: 12 },
  searchBar: {
    flex: 1, flexDirection: 'row', alignItems: 'center',
    backgroundColor: '#f5f5f5', borderRadius: 12, padding: 12, gap: 12,
  },
  searchInput: { flex: 1, fontSize: 16, fontFamily: 'Inter_400Regular' },
  filterButton: {
    width: 48, height: 48, borderRadius: 12,
    backgroundColor: '#f5f5f5', alignItems: 'center', justifyContent: 'center',
  },
  categoriesContainer: { marginTop: 24 },
  categoriesContent: { paddingHorizontal: 24, gap: 12 },
  categoryButton: {
    paddingHorizontal: 20, paddingVertical: 10,
    borderRadius: 20, backgroundColor: '#f5f5f5',
  },
  categoryButtonActive: { backgroundColor: '#007AFF' },
  categoryText: { fontFamily: 'Inter_600SemiBold', fontSize: 14, color: '#666' },
  categoryTextActive: { color: '#fff' },
  destinationsGrid: { padding: 24, gap: 24 },
  destinationCard: {
    backgroundColor: '#fff', borderRadius: 16, overflow: 'hidden',
    shadowColor: '#000', shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1, shadowRadius: 8, elevation: 4,
  },
  destinationImage: { width: '100%', height: 200 },
  destinationInfo: { padding: 16 },
  destinationHeader: {
    flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center',
  },
  destinationName: { fontSize: 18, fontFamily: 'Inter_600SemiBold', color: '#000' },
  destinationRating: { fontSize: 14, fontFamily: 'Inter_600SemiBold', color: '#FFB800' },
  destinationLocation: { flexDirection: 'row', alignItems: 'center', gap: 4, marginTop: 8 },
  destinationCountry: { fontFamily: 'Inter_400Regular', fontSize: 14, color: '#666' },
  destinationPrice: { fontFamily: 'Inter_600SemiBold', fontSize: 16, color: '#007AFF', marginTop: 8 },
  pagination: {
    flexDirection: 'row', justifyContent: 'space-between',
    alignItems: 'center', marginHorizontal: 24, marginTop: 24,
  },
  pageButton: {
    backgroundColor: '#007AFF', paddingVertical: 10, paddingHorizontal: 20, borderRadius: 12,
  },
  disabledButton: { backgroundColor: '#ccc' },
  pageButtonText: { color: '#fff', fontFamily: 'Inter_600SemiBold', fontSize: 14 },
  pageIndicator: { fontFamily: 'Inter_500Medium', fontSize: 14, color: '#444' },

  // Modal
  backdrop: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'center',
    padding: 20,
  },
  modalCard: {
    backgroundColor: '#fff',
    borderRadius: 24,
    overflow: 'hidden',
    maxHeight: Dimensions.get('window').height * 0.9,
    width: '100%',
    shadowColor: '#000',
    shadowOpacity: 0.15,
    shadowRadius: 10,
    elevation: 6,
  },
  modalImage: {
    width: '100%',
    height: 200,
  },
  modalCloseButton: {
    position: 'absolute',
    top: 12,
    right: 12,
    backgroundColor: '#FF3B30',
    width: 36,
    height: 36,
    borderRadius: 18,
    alignItems: 'center',
    justifyContent: 'center',
    zIndex: 10,
    elevation: 10,
  },
  modalCloseText: {
    color: '#fff',
    fontSize: 22,
    fontWeight: '600',
    marginTop: -2,
  },
  modalContent: {
    padding: 20,
  },
  modalTitle: {
    fontSize: 20,
    fontFamily: 'Inter_700Bold',
    marginBottom: 12,
    color: '#000',
  },
  modalText: {
    fontSize: 14,
    color: '#333',
    fontFamily: 'Inter_400Regular',
    marginBottom: 10,
    lineHeight: 20,
  },
  label: {
    fontFamily: 'Inter_600SemiBold',
    color: '#000',
  },
  
  headerTitle: {
    fontSize: 30,
    fontFamily: 'Inter-Black',
    color: '#0051A8',
    letterSpacing: -0.6,
  },
  headerSubtitle: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: '#333',
    marginTop: 4,
  },
  
});


import { useEffect, useRef, useState } from 'react';
import {
  View,
  Text,
  TextInput,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
  Keyboard,
  TouchableWithoutFeedback,
  Platform,
  Animated,
  KeyboardAvoidingView,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { Calendar, MapPin, Clock, Users, CheckCircle2, Sparkles } from 'lucide-react-native';
import { useLocalSearchParams } from 'expo-router';
import { supabase } from '../../lib/supabase';
import * as Haptics from 'expo-haptics';

const Field = ({ icon, value, onChange, placeholder, keyboardType }: any) => (
  <View style={styles.inputWrapper}>
    {icon}
    <TextInput
      style={styles.input}
      value={value}
      onChangeText={onChange}
      placeholder={placeholder}
      placeholderTextColor="#999"
      keyboardType={keyboardType || 'default'}
      autoCapitalize="none"
      autoCorrect={false}
      returnKeyType="done"
    />
  </View>
);

export default function TripsScreen() {
  const { destination: routeDestination } = useLocalSearchParams();
  const [destination, setDestination] = useState('');
  const [duration, setDuration] = useState('');
  const [travelers, setTravelers] = useState('');
  const [budget, setBudget] = useState('');
  const [fullPlan, setFullPlan] = useState<string | null>(null);
  const [userId, setUserId] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [tripSaved, setTripSaved] = useState(false);

  const fadeAnim = useRef(new Animated.Value(0)).current;
  const slideAnim = useRef(new Animated.Value(0)).current;

  const hasSetInitialDestination = useRef(false);

  useEffect(() => {
    if (!hasSetInitialDestination.current && typeof routeDestination === 'string') {
      setDestination(routeDestination);
      hasSetInitialDestination.current = true;
    }
  }, [routeDestination]);

  useEffect(() => {
    const fetchSession = async () => {
      const { data } = await supabase.auth.getSession();
      const id = data.session?.user.id;
      if (id) setUserId(id);
    };
    fetchSession();
  }, []);

  const animateCard = () => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 600,
      useNativeDriver: true,
    }).start();
  };

  const showBanner = () => {
    Animated.timing(slideAnim, {
      toValue: 1,
      duration: 300,
      useNativeDriver: true,
    }).start();

    setTimeout(() => {
      Animated.timing(slideAnim, {
        toValue: 0,
        duration: 300,
        useNativeDriver: true,
      }).start(() => setTripSaved(false));
    }, 2500);
  };

  const generatePlan = async () => {
    if (!destination || !duration || !budget) {
      Alert.alert('Missing Info', 'Please fill all required fields.');
      return;
    }

    setLoading(true);
    setFullPlan(null);
    setTripSaved(false);
    Haptics.selectionAsync();

    const prompt = `
    You're a professional travel planner.
    
    Plan a ${duration}-day trip to ${destination} for ${travelers || '1'} person(s), with a budget of ₹${budget} per person.
    
    Begin with a one-line summary that captures the essence of ${destination} and the trip style.
    
    For each day, provide a concise itinerary including:
    1. Main activity or theme  
    2. Key attraction or must-visit spot  
    3. Local food to try or recommended eatery  
    4. Transport guidance (if needed)  
    5. Estimated daily cost in ₹
    
    Keep the writing formal, structured, and brief — like a premium itinerary guide. Avoid long paragraphs or unnecessary detail.
    
    At the end, include:
    1. Total Estimated Cost  
    2. Top highlights of the overall trip
    
    Only use emojis where they add clarity (like ₹ for currency), and avoid markdown or decorative formatting.
    `;
    try {
      const res = await fetch('https://api.mistral.ai/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: 'Bearer INaYqUl59t9PUsFfvimo41BwWqRtVuzH',
        },
        body: JSON.stringify({
          model: 'mistral-tiny',
          messages: [{ role: 'user', content: prompt }],
        }),
      });

      const data = await res.json();
      const content = data?.choices?.[0]?.message?.content;

      if (content) {
        const cleaned = content.replace(/\*\*/g, '').trim();
        setFullPlan(cleaned);
        animateCard();
      } else {
        Alert.alert('Error', 'No valid response from AI');
      }
    } catch (err) {
      console.error(err);
      Alert.alert('Error', 'Failed to generate trip plan.');
    } finally {
      setLoading(false);
    }
  };

  const saveTripPlan = async () => {
    if (!userId || !fullPlan) return;
    if (tripSaved) return;

    const { error } = await supabase.from('trips').insert([
      {
        user_id: userId,
        destination,
        duration: parseInt(duration),
        travelers: parseInt(travelers || '1'),
        budget: parseInt(budget),
        plan: fullPlan,
      },
    ]);

    if (error) Alert.alert('Error', error.message);
    else {
      Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
      setTripSaved(true);
      showBanner();
    }
  };

  const bannerTranslateY = slideAnim.interpolate({
    inputRange: [0, 1],
    outputRange: [100, 0],
  });

  return (
    <KeyboardAvoidingView
  behavior={Platform.OS === 'ios' ? 'padding' : undefined}
  style={{ flex: 1 }}
>
  <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
    <LinearGradient colors={['#cce6ff', '#eaf4ff', '#ffffff']} style={styles.container}>
      <ScrollView
      scrollEventThrottle={16}
        style={{ flex: 1 }}
        contentContainerStyle={[styles.content, { flexGrow: 1 }]}
        keyboardShouldPersistTaps="handled"
        showsVerticalScrollIndicator={false}
      >
        {/* ...everything inside remains the same */}

        <View style={styles.header}>
  <Text style={styles.headerTitle}>Plan Your Trip</Text>
  <Text style={styles.headerSubtitle}>Generate your itinerary with AI</Text>
</View>



            <View style={styles.form}>
              <Field icon={<MapPin size={18} color="#007AFF" />} value={destination} onChange={setDestination} placeholder="Destination" />
              <Field icon={<Calendar size={18} color="#007AFF" />} value={duration} onChange={setDuration} placeholder="How many days?" keyboardType="numeric" />
              <Field icon={<Users size={18} color="#007AFF" />} value={travelers} onChange={setTravelers} placeholder="Travelers" keyboardType="numeric" />
              <Field icon={<Clock size={18} color="#007AFF" />} value={budget} onChange={setBudget} placeholder="Budget per person" keyboardType="numeric" />

              <TouchableOpacity style={styles.button} onPress={generatePlan} disabled={loading}>
                {loading ? <ActivityIndicator color="#fff" /> : <Text style={styles.buttonText}>Generate Itinerary</Text>}
              </TouchableOpacity>
            </View>

            {fullPlan && (
              <Animated.View style={[styles.card, { opacity: fadeAnim }]}>
                <Text style={styles.cardTitle}>Trip Plan for {destination}</Text>
                <Text style={styles.cardContent}>{fullPlan}</Text>
              </Animated.View>
            )}
          </ScrollView>

          {fullPlan && !tripSaved && (
            <TouchableOpacity style={styles.fab} onPress={saveTripPlan}>
              <Sparkles size={22} color="#fff" />
            </TouchableOpacity>
          )}

          <Animated.View
            style={[
              styles.successBanner,
              { transform: [{ translateY: bannerTranslateY }], opacity: slideAnim },
            ]}
          >
            <TouchableOpacity onPress={() => slideAnim.setValue(0)}>
              <View style={styles.successRow}>
                <CheckCircle2 size={18} color="#34C759" />
                <Text style={styles.successText}>Trip Plan Saved</Text>
              </View>
            </TouchableOpacity>
          </Animated.View>
        </LinearGradient>
      </TouchableWithoutFeedback>
    </KeyboardAvoidingView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  content: {
    padding: 24,
    paddingTop: Platform.OS === 'ios' ? 60 : 40,
    paddingBottom: 120,
  },
  title: {
    fontSize: 30,
    fontWeight: '800',
    color: '#003366',
    marginBottom: 4,
  },
  subtitle: {
    fontSize: 14,
    color: '#555',
    marginBottom: 28,
  },
  form: {
    gap: 14,
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#ffffffcc',
    borderRadius: 16,
    paddingHorizontal: 16,
    paddingVertical: 14,
    borderWidth: 1,
    borderColor: '#d4e4ff',
    shadowColor: '#007AFF',
    shadowOpacity: 0.05,
    shadowRadius: 5,
    shadowOffset: { width: 0, height: 4 },
  },
  input: {
    flex: 1,
    fontSize: 15,
    color: '#000',
  },
  button: {
    backgroundColor: '#007AFF',
    padding: 16,
    borderRadius: 16,
    alignItems: 'center',
    marginTop: 8,
  },
  buttonText: {
    fontSize: 15,
    fontWeight: '600',
    color: '#fff',
  },
  card: {
    backgroundColor: '#fff',
    marginTop: 36,
    padding: 20,
    borderRadius: 20,
    shadowColor: '#000',
    shadowOpacity: 0.06,
    shadowOffset: { width: 0, height: 6 },
    shadowRadius: 10,
    elevation: 4,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: '700',
    marginBottom: 12,
    color: '#003366',
  },
  cardContent: {
    fontSize: 15,
    color: '#333',
    lineHeight: 22,
  },
  fab: {
    position: 'absolute',
    bottom: 28,
    right: 24,
    backgroundColor: '#34C759',
    padding: 16,
    borderRadius: 100,
    elevation: 6,
    shadowColor: '#000',
    shadowOpacity: 0.15,
    shadowOffset: { width: 0, height: 4 },
  },
  successBanner: {
    position: 'absolute',
    bottom: 30,
    left: 20,
    right: 20,
    backgroundColor: '#e7fff0',
    borderRadius: 12,
    padding: 12,
    alignItems: 'center',
    justifyContent: 'center',
    elevation: 4,
  },
  successRow: {
    flexDirection: 'row',
    gap: 10,
    alignItems: 'center',
  },
  successText: {
    fontSize: 14,
    color: '#1a9632',
    fontWeight: '500',
  },
  headerTitle: {
    fontSize: 30,
    fontFamily: 'Inter-Black',
    color: '#0051A8',
    letterSpacing: -0.6,
  },
  headerSubtitle: {
    fontSize: 14,
    fontFamily: 'Inter-Regular',
    color: '#333',
    marginTop: 4,
  },
  header: {
    marginBottom: 24,
    alignItems: 'flex-start', // or 'center' if you prefer centered titles
  },
  
});
